/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.practicesummative2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author chand
 */
public class HomePanel extends javax.swing.JPanel{

    /**
     * Creates new form HomePanel
     */
    public HomePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        backgroundLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(5000, 500));
        setPreferredSize(new java.awt.Dimension(1055, 500));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        progressButton.setBackground(new java.awt.Color(174, 230, 246));
        progressButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        progressButton.setText("Progress");
        progressButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressButton.setHideActionText(true);
        progressButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        progressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                progressButtonActionPerformed(evt);
            }
        });
        add(progressButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 1080, 40));

        helpButton.setBackground(new java.awt.Color(174, 230, 246));
        helpButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        helpButton.setText("Help");
        helpButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        helpButton.setHideActionText(true);
        helpButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        add(helpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 1080, 40));

        playButton.setBackground(new java.awt.Color(174, 230, 246));
        playButton.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        playButton.setText("Play");
        playButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playButton.setHideActionText(true);
        playButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 1080, 40));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TypeBlast.png"))); // NOI18N
        backgroundLabel.setText("High Score:");
        add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 590));
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
        // changing the panel to the difficulty screen
        GameFrame.cl.show(GameFrame.p, "Difficulty Screen");
    }//GEN-LAST:event_playButtonActionPerformed

    private void progressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_progressButtonActionPerformed
        // TODO add your handling code here:
        try {
            // setting up the variables
            FileReader file;
            BufferedReader input;
            String text;
            ArrayList<Integer> nums;

            // setting up the joptionpane
            Object[] options = {"Chronologically", "Highest to Lowest", "Lowest to Highest"};
            int option = JOptionPane.showOptionDialog(null, "Do you want to view your progress chronologically or by score?  ", "Progress Settings", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);

            // reading from the file
            file = new FileReader("src/main/java/com/mycompany/practicesummative2/Score.txt");
            input = new BufferedReader(file);
            text = "Scores (Earliest to Most Recent): \n";
            nums = new ArrayList<Integer>(); 

            // looking at each line
            while (true) {
                String line = input.readLine();
                if (line == null) {
                    break;
                }
                text += line + "\n";
                nums.add(Integer.parseInt(line));
            }
            
            if (option == 0) {
                // if user wants chronologically
                JOptionPane.showMessageDialog(null, text);
            }
            if (option == 1) {
                // if user wants highest to lowest
                // bubble sort
                int swaps = 0; // counting the number of swaps with each iteration

                while (true) {
                    // bubble sort
                    for (int j = 0; j < nums.size() - 1; j++) {
                        if (nums.get(j) < nums.get(j + 1)) {
                            int temp = nums.get(j + 1);
                            nums.set(j + 1, nums.get(j));
                            nums.set(j, temp);

                            swaps += 1; // add the number of swaps
                        }
                    }

                    // checking if array is already sorted
                    if (swaps == 0) {
                        break;
                    }
                    swaps = 0; // reset swap counter
                }
                
                text = "Scores (Highest to Lowest):\n";
                for (Integer num: nums) {
                    text += Integer.toString(num) + "\n";
                }
                
                JOptionPane.showMessageDialog(null, text);
            }
            if (option == 2) {
                // if user wants lowest to highest
                // bubble sort
                int swaps = 0; // counting the number of swaps with each iteration

                while (true) {
                    // bubble sort
                    for (int j = 0; j < nums.size() - 1; j++) {
                        if (nums.get(j) > nums.get(j + 1)) {
                            int temp = nums.get(j + 1);
                            nums.set(j + 1, nums.get(j));
                            nums.set(j, temp);

                            swaps += 1; // add the number of swaps
                        }
                    }

                    // checking if array is already sorted
                    if (swaps == 0) {
                        break;
                    }
                    swaps = 0; // reset swap counter
                }

                text = "Scores (Lowest to Highest):\n";
                for (Integer num : nums) {
                    text += Integer.toString(num) + "\n";
                }

                JOptionPane.showMessageDialog(null, text);
            }
        }
        catch (Exception e) {}
   
    }//GEN-LAST:event_progressButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        // opens the joptionpane instructions
        JOptionPane.showMessageDialog(null, "WARNING! Your planet Keystonia is being attacked by a group of meteors! \nStop the meteors by typing the word on the meteor. \nYou gain a point every time you destroy a meteor. \nYou lose a point every time you misspell a word, so be careful! \nThe fewer letters a word has, the faster its meteor goes.\n"
                + "\n"
                + "To check your score, use the progress button on the home screen to view it chronologically or sort it by the number of points. \nYour progress will still be saved once you close the application.\n"
                + "\n"
                + "Easy Difficulty: 3 lives\n"
                + "Medium Difficulty: 2 Lives\n"
                + "Hard Difficulty: 1 Life\n"
                + "\nCheck the User Guide for more support.");
    }//GEN-LAST:event_helpButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton progressButton;
    // End of variables declaration//GEN-END:variables
}
